<%- include('../layouts/header'); -%>
<body>
  <div class="main-container the-flex-works">
    <div class="chat-inner-container">
      <a href="/chat-lobby">Back to Chat Lobby</a>
      <h3 id="signup-header">Welcome to: <%= name %></h3>
      <div id="app">
        <div id="message-list">
          <div
            v-for="message in messages"
            v-bind:class="isYourMessage(message)"
          >
            <h4>{{ message.sender }}</h4>
            <p>{{ message.text }}</p>
          </div>
        </div>
        <div id="message-input-container">
          <input id="message-input" type="text" v-on:keyup="setMessageText" />
          <button v-on:click="createChatMessage">Send Message</button>
        </div>
      </div>
    </div>
  </div>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.19.0/axios.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const channel = window.location.pathname.split("/")[2];

    var app = new Vue({
      el: "#app",
      data: {
        user_name: null,
        // v-bind:class="user_name "
        messages: null,
        messageText: null
      },
      created: function() {
        this.joinChat(channel);
        this.fetchChatMessages(`/chat/messages/${channel}`);
      },
      methods: {
        joinChat() {
          const socket = io(window.location.host, {
            upgrade: false,
            transports: ["websocket"]
          });

          socket.on("channel-joined", data => {
            console.log("channel joined");
          });

          socket.on("new-chat-message", data => {
            this.handleNewMessage(data);
          });

          socket.emit("join-chat", channel, data => {
            console.log("joined chat");
          });
        },
        isYourMessage: function(message) {
          return message.sender === this.user_name
            ? "your-message message"
            : "other-message message";
        },
        setMessageText(e) {
          this.messageText = e.target.value;
        },
        handleNewMessage(data) {
          this.messages = [...this.messages, data.data];
        },
        async fetchChatMessages(path) {
          const {
            data: { messages, user_name }
          } = await axios.get(path);
          this.user_name = user_name;
          this.messages = messages;
        },
        async createChatMessage(text) {
          document.getElementById("message-input").value = "";
          const { status, data } = await axios.post(
            `/chat/messages/${channel}`,
            {
              messageText: this.messageText
            }
          );

          this.messageText = "";
          if (status === 302) {
            // A 302 should never make it here unless the user is manually sending
            // requests...
            // MAYBE? `localhost:4000/${data.redirectTO}`
            window.location.replace(data.redirectTo);
          }
          if (status === 400) {
            this.error = "Message failed to send.";
          }
        }
      }
    });
  </script>
</body>
<%- include('../layouts/footer'); -%>
